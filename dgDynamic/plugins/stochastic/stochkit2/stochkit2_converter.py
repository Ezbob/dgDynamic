import io


def i(message, level, per_level_spaces=4):
    return "{}{}".format(_indent(level, per_level_spaces), message)


def _indent(indent_level, indent_spaces=4):
    return ' ' * (indent_level * indent_spaces)


def generate_model(simulator):

    with io.StringIO() as model_string:
        model_string.write('<!--- Generated by dgDynamic --->\n')
        model_string.write('<Model>\n')
        generate_preamble(model_string, simulator.reaction_count,
                          simulator.species_count, indent=1)
        model_string.write('</Model>')
        return model_string.getvalue()


def generate_preamble(stream, reaction_count, species_count, indent=0):
    stream.write(i("<NumberOfReactions>{}</NumberOfReactions>\n".format(reaction_count), indent))
    stream.write(i("<NumberOfSpecies>{}</NumberOfSpecies>\n".format(species_count), indent))


def generate_rate_equations(stream, indent=0):
    stream.write(i('<ReactionsList>\n', indent))

    stream.write(i('</ReactionsList>\n', indent))


def generate_species_list(stream, indent=0):
    stream.write(i('<SpeciesList>\n', indent))

    stream.write(i('</SpeciesList>\n', indent))
